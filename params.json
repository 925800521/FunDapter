{"name":"FunDapter","tagline":"Simplify Adapter creation for your Android ListViews.","body":"##FunDapter is a new approach to Android ListView Adapters. \r\n\r\nAchieve more. Write less code. Fix less bugs. Simply declare which fields you want and apply behaviours to them.\r\n\r\nAfter writing what was probably my 1000th ListView Adapter, I've realized that I was mostly wasting my time. All we really need in order to create an Adapter is a layout file and a dictionary of field definitions!\r\n\r\n### Getting Started:\r\n\r\n    BindDictionary<Product> prodDict = new BindDictionary<Product>(); \r\n\r\n### String fields:\r\n\r\n    prodDict.addStringField(R.id.title, new StringExtractor<Product>() { \r\n        @Override \r\n        public String getStringValue(Product item, int position) { \r\n        return item.title; \r\n        } \r\n    }).typeface(tfBold).visibilityIfNull(View.GONE); // Chain methods for additional behaviour\r\n\r\n### Image fields:\r\n\r\n    prodDict.addImageField(R.id.image, new StringExtractor<Product>() { \r\n\r\n        @Override \r\n        public String getStringValue(Product item, int position) { \r\n           return item.imageUrl; \r\n        } \r\n    }, new ImageLoader() { \r\n        @Override \r\n        public void loadImage(String url, ImageView view) { \r\n        // INSERT IMAGE LOADER LIBRARY HERE \r\n        } \r\n    });\r\n\r\n### Create the adapter:\r\n\r\n    FunDapter<Product> adapter = new FunDapter<Product>(this, prodList, \r\n        R.layout.product_list_item, prodDict);\r\n\r\n###Many more field types are supported! [Get started](https://github.com/amigold/FunDapter)","google":"UA-40929159-1","note":"Don't delete this file! It's used internally to help with page regeneration."}